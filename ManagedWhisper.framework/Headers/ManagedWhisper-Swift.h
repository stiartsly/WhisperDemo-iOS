// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
#endif

#import <ManagedWhisper/ManagedWhisper.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
/**
  Multiplexing channel close reason mode.
*/
typedef SWIFT_ENUM_NAMED(NSInteger, WMCloseReason, "CloseReason") {
/**
  Channel closed normally.
*/
  WMCloseReasonNormal = 0,
/**
  Channel closed because timeout.
*/
  WMCloseReasonTimeout = 1,
/**
  Channel closed because error occured.
*/
  WMCloseReasonError = 2,
};

/**
  Port forwarding supported protocols.
*/
typedef SWIFT_ENUM_NAMED(NSInteger, WMPortForwardingProtocol, "PortForwardingProtocol") {
/**
  UDP protocol.
*/
  WMPortForwardingProtocolUDP = 0,
/**
  TCP protocol.
*/
  WMPortForwardingProtocolTCP = 1,
};


/**
  The class representing the remote service, which should be directly
  or indirectly inaccessible unless via Whisper port forwarding service.
*/
SWIFT_CLASS_NAMED("RemoteService")
@interface WMRemoteService : NSObject
/**
  The service name.
*/
@property (nonatomic, copy) NSString * _Nullable name;
/**
  The listening host
*/
@property (nonatomic, copy) NSString * _Nullable host;
/**
  The listening port.
*/
@property (nonatomic, copy) NSString * _Nullable port;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum WMWhisperLogLevel : NSInteger;
@class WMWhisperOptions;
@protocol WMWhisperDelegate;
@class WMWhisperUserInfo;
@class WMWhisperNodeInfo;
@class WMWhisperFriendInfo;

/**
  The class representing Whisper client.
*/
SWIFT_CLASS_NAMED("Whisper")
@interface WMWhisper : NSObject
/**
  Whisper managed App message max length.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_APP_MESSAGE_LEN;)
+ (NSInteger)MAX_APP_MESSAGE_LEN;
/**
  Get current Whisper client version.

  returns:
  The current whisper client version.
*/
+ (NSString * _Nonnull)getVersion;
/**
  Check if the whisper ID is valid.
  \param id The whisper id to be check


  returns:
  True if whisper id is valid, otherwise false
*/
+ (BOOL)isValidId:(NSString * _Nonnull)id;
/**
  Check if the whisper Key is valid.
  \param key The whisper key to be check


  returns:
  True if whisper key is valid, otherwise false
*/
+ (BOOL)isValidKey:(NSString * _Nonnull)key;
/**
  Set log level for whisper client.
  Default level to control log output is \code
  WhisperLogLevel.Info
  \endcode
  \param level The log level

*/
+ (void)setLogLevel:(enum WMWhisperLogLevel)level;
/**
  Get a whisper client singleton instance. After getting the instance
  with first time, it’s ready to start and therefore connect to the
  remote server.
  \param options The options to set for whisper client

  \param delegate The delegate for whisper client to comply with


  throws:
  WhisperError

  returns:
  The client whisper instance
*/
+ (WMWhisper * _Nullable)getInstanceWithOptions:(WMWhisperOptions * _Nonnull)options delegate:(id <WMWhisperDelegate> _Nonnull)delegate error:(NSError * _Nullable * _Nullable)error;
/**
  Get a whisper client singleton instance.

  returns:
  The whisper client instance or ni
*/
+ (WMWhisper * _Nullable)getInstance;
/**
  Start whisper client asynchronously to connect to remote server.
  If the connection to server is successful, whisper client starts
  working.
  \param iterateInterval Internal loop interval, in milliseconds


  throws:
  WhisperError
*/
- (BOOL)startWithIterateInterval:(NSInteger)iterateInterval error:(NSError * _Nullable * _Nullable)error;
/**
  Disconnect whisper client from the server, and destroy all associated
  resources to whisper client instance.
  After calling the method, the whisper client instance becomes invalid,
  and can not be refered any more.
*/
- (void)kill;
/**
  Get app identifier associated with the whisper client instance.

  returns:
  The app identifier
*/
- (NSString * _Nonnull)getAppId;
/**
  Get node identifier associated with the whisper client instance.

  returns:
  The node identifier
*/
- (NSString * _Nonnull)getNodeId;
/**
  Get user identifier associated with the whisper client instance.

  returns:
  The user identifier
*/
- (NSString * _Nonnull)getUserId;
/**
  Get login identifier associated with the whisper client instance.

  returns:
  The login identifier
*/
- (NSString * _Nonnull)getLogin;
/**
  whisper client.
  \param newUserInfo The new user information to set


  throws:
  WhisperError
*/
- (BOOL)setSelfUserInfo:(WMWhisperUserInfo * _Nonnull)newUserInfo error:(NSError * _Nullable * _Nullable)error;
/**
  Get self user information.

  throws:
  WhisperError

  returns:
  The current user information
*/
- (WMWhisperUserInfo * _Nullable)getSelfUserInfo:(NSError * _Nullable * _Nullable)error;
/**
  Set node information.
  After node information changed, whipser client will update node
  information to server.
  \param newNodeInfo The new node information to set


  throws:
  WhisperError
*/
- (BOOL)setNodeInfo:(WMWhisperNodeInfo * _Nonnull)newNodeInfo error:(NSError * _Nullable * _Nullable)error;
/**
  Get self node information.

  throws:
  WhisperError

  returns:
  The node information to the whisper client
*/
- (WMWhisperNodeInfo * _Nullable)getNodeInfo:(NSError * _Nullable * _Nullable)error;
/**

  throws:
  WhisperError
*/
- (NSArray<WMWhisperFriendInfo *> * _Nullable)getFriends:(NSError * _Nullable * _Nullable)error;
/**
  Get specified friend information.
  \param friendId The user identifier of friend


  throws:
  WhisperError

  returns:
  The friend information to user \code
  friendId
  \endcode
*/
- (WMWhisperFriendInfo * _Nullable)getFriendInfoForFriend:(NSString * _Nonnull)friendId error:(NSError * _Nullable * _Nullable)error;
/**
  Set the label of the specified friend.
  The label of a friend is a private alias name for current user.
  It can be seen by current user only, and has no impact to the target
  friend itself.
  \param friendId the friend’s user identifier

  \param newLabel the new label of specified friend


  throws:
  WhisperError
*/
- (BOOL)setLabelForFriend:(NSString * _Nonnull)friendId withLabel:(NSString * _Nonnull)newLabel error:(NSError * _Nullable * _Nullable)error;
/**
  Check if the user ID is friend.
  \param userId The userId to check


  returns:
  True if the user is friend, otherwise false
*/
- (BOOL)isFriendWithUser:(NSString * _Nonnull)userId;
/**
  Attempt to send a new friend request to specified user.
  This function will send a friend request to server, and the server
  return the result within a friend response. The whisper client can
  check whether the friend request be confirmed or refused in friend
  response callback.
  \param userId The target user id

  \param hello PIN for target user, or any application defined
  content.


  throws:
  WhisperError
*/
- (BOOL)sendFriendRequestTo:(NSString * _Nonnull)userId withGreeting:(NSString * _Nonnull)hello error:(NSError * _Nullable * _Nullable)error;
/**
  Reply the friend request.
  This function will send a friend response to server.
  \param userId The user id who want be friend with current user

  \param status The status code of the response. 0 is on success,
  otherwise is error

  \param reason The error message if status is error, or nil on success

  \param entrusted Whether entrust this friend. True if entrust this
  friend, false if not

  \param expire The expire time or nil never expire.


  throws:
  WhisperError
*/
- (BOOL)replyFriendRequestTo:(NSString * _Nonnull)userId withStatus:(NSInteger)status reason:(NSString * _Nullable)reason entrusted:(BOOL)entrusted expire:(NSString * _Nullable)expire error:(NSError * _Nullable * _Nullable)error;
/**
  Remove friendship with the specified friend.
  This function will send a remove friend indication to server.
  If calling this function correct, the server will clean the friend
  relationship, and send friend removed message to both.
  \param friendId The target user id to remove friendship.


  throws:
  WhisperError
*/
- (BOOL)removeFriend:(NSString * _Nonnull)friendId error:(NSError * _Nullable * _Nullable)error;
/**
  Send a message to the specified friend.
  The message length may not exceed \code
  MAX_APP_MESSAGE_LEN
  \endcode, and message
  itself should be text-formatted. Larger messages must be splitted by
  application and sent as separate messages. Other clients can reassemble
  the fragments.
  \param target The target id (userid or userid@nodeid)

  \param msg The message content defined by application


  throws:
  WhisperError
*/
- (BOOL)sendFriendMessageTo:(NSString * _Nonnull)target withMessage:(NSString * _Nonnull)msg error:(NSError * _Nullable * _Nullable)error;
/**
  Send invite request to the specified friend
  Application can attach the application defined data with in the invite
  request, and the data will send to target friend.
  \param target The target id(userid or userid@nodeid)

  \param data The application defined data send to target user

  \param responseHandler The callback to receive invite reponse


  throws:
  WhisperError
*/
- (BOOL)sendInviteFriendRequestTo:(NSString * _Nonnull)target withData:(NSString * _Nonnull)data error:(NSError * _Nullable * _Nullable)error responseHandler:(void (^ _Nonnull)(WMWhisper * _Nonnull, NSString * _Nonnull, NSInteger, NSString * _Nullable, NSString * _Nullable))responseHandler;
/**
  Reply the friend invite request.
  This function will send a invite response to friend.
  \param target The id(userid@nodeid) who send invite request

  \param status The status code of the response
  0 is on success, otherse is error

  \param reason The error message if status is error, or nil if success

  \param data The application defined data send to target user.
  If the status is error, this will be ignored.


  throws:
  WhisperError
*/
- (BOOL)replyFriendInviteRequestTo:(NSString * _Nonnull)target withStatus:(NSInteger)status reason:(NSString * _Nullable)reason data:(NSString * _Nullable)data error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/**
  Whisper client connection status to the server.
*/
typedef SWIFT_ENUM_NAMED(NSInteger, WMWhisperConnectionStatus, "WhisperConnectionStatus") {
/**
  Attempting to connect to server.
  Not connected yet, so it’s offline.
*/
  WMWhisperConnectionStatusConnecting = 0,
/**
  Whisper client connected to the server.
  Indicate the client is online.
*/
  WMWhisperConnectionStatusConnected = 1,
/**
  There is no connection to the server.
  Indicate the client is offline.
*/
  WMWhisperConnectionStatusDisconnected = 2,
};


/**
  The protocol to Whisper Client.
*/
SWIFT_PROTOCOL_NAMED("WhisperDelegate")
@protocol WMWhisperDelegate
@optional
/**
  Tell the delegate that Whisper client will become idle for a while,
  during which application can perform instant idle work.
  \param whisper Whisper client instance


  returns:
  Void
*/
- (void)willBecomeIdle:(WMWhisper * _Nonnull)whisper;
/**
  Tell the delegate that the self connection status changed.
  \param whisper Whisper client instance

  \param newStatus Current connection status.
  see \code
  WhisperConnectionStatus
  \endcode


  returns:
  Void
*/
- (void)connectionStatusDidChange:(WMWhisper * _Nonnull)whisper newStatus:(enum WMWhisperConnectionStatus)newStatus;
@required
/**
  Tell the delegate that Whisper client is being ready.
  Application should wait this callback invoked before calling any
  whisper function to interact with friends.
  \param whisper Whisper client instance


  returns:
  Void
*/
- (void)didBecomeReady:(WMWhisper * _Nonnull)whisper;
@optional
/**
  Tell the delegate that current self user info has been changed.
  \param whisper Whisper client instance

  \param newInfo The newly updated user information


  returns:
  Void
*/
- (void)selfUserInfoDidChange:(WMWhisper * _Nonnull)whisper newInfo:(WMWhisperUserInfo * _Nonnull)newInfo;
/**
  Tell the delegate to iterate each friend item in friend list.
  \param whisper Whisper client instance

  \param friends The friends list.

*/
- (void)didReceiveFriendsList:(WMWhisper * _Nonnull)whisper friends:(NSArray<WMWhisperFriendInfo *> * _Nonnull)friends;
/**
  Tell the delegate that friend information has been changed.
  \param whisper Whisper client instance

  \param friendId The friend’s user id

  \param newInfo The updated friend information


  returns:
  Void
*/
- (void)friendInfoDidChange:(WMWhisper * _Nonnull)whisper forFriend:(NSString * _Nonnull)friendId newInfo:(WMWhisperFriendInfo * _Nonnull)newInfo;
/**
  Tell the delegate that friend presence has been changed.
  \param whisper Whisper client instance

  \param friendId The friend’s user id

  \param newPresence The updated presence status of the friend


  returns:
  Void
*/
- (void)friendPresenceDidChange:(WMWhisper * _Nonnull)whisper forFriend:(NSString * _Nonnull)friendId newPresence:(NSString * _Nonnull)newPresence;
/**
  Tell the delegate that an friend request message has been received.
  \param whisper Whisper client instance

  \param userId The user id who want be friend with current user

  \param userInfo The user information to \code
  userId
  \endcode

  \param hello The PIN for target user, or any application defined
  content


  returns:
  True if current callback consume this event, otherwise
  return false
*/
- (BOOL)didReceiveFriendRequest:(WMWhisper * _Nonnull)whisper fromUser:(NSString * _Nonnull)userId withUserInfo:(WMWhisperUserInfo * _Nonnull)userInfo hello:(NSString * _Nonnull)hello;
/**
  Tell the delegate that an friend response to previous friend request
  has been received.
  \param whisper Whisper client instance

  \param userId The target user id

  \param status The status code of the response. 0 is on success,
  otherwise is error

  \param reason The error message if status is error, or nil if success

  \param entrusted Whether entrusted by this friend, true if entrusted
  by this friend, in other cases is false.

  \param expire The expire time, or nil if never expire


  returns:
  true if current callback consume this event, otherwise
  return false
*/
- (BOOL)didReceiveFriendResponse:(WMWhisper * _Nonnull)whisper fromUser:(NSString * _Nonnull)userId withStatus:(NSInteger)status reason:(NSString * _Nullable)reason entrusted:(BOOL)entrusted expire:(NSString * _Nullable)expire;
/**
  Tell the delegate that an new friend has been added to current
  user’s friend list.
  \param whisper Whisper client instance

  \param newFriend The added friend’s information


  returns:
  Void
*/
- (void)newFriendAdded:(WMWhisper * _Nonnull)whisper withFriendInfo:(WMWhisperFriendInfo * _Nonnull)newFriend;
/**
  Tell the delegate that an friend has been removed from current user’s
  friend list.
  \param whisper Whisper client instance

  \param friendId The friend’s user id


  returns:
  Void
*/
- (void)friendRemoved:(WMWhisper * _Nonnull)whisper forFriend:(NSString * _Nonnull)friendId;
/**
  Tell the delegate that an friend message has been received.
  \param whisper Whisper client instance

  \param from The id(userid@nodeid) from who send the message

  \param message The message content


  returns:
  True if current callback consume this event, otherwise
  return false
*/
- (BOOL)didReceiveFriendMessage:(WMWhisper * _Nonnull)whisper from:(NSString * _Nonnull)from withMessage:(NSString * _Nonnull)message;
/**
  Tell the delegate that an friend invite request has been received.
  \param whisper Whisper client instance

  \param from The user id from who send the invite request

  \param data The application defined data sent from friend


  returns:
  True if current callback consume this event, otherwise
  return false
*/
- (BOOL)didReceiveFriendInviteRequest:(WMWhisper * _Nonnull)whisper from:(NSString * _Nonnull)from withData:(NSString * _Nonnull)data;
@end

/**
  Whisper friend entrustment type
*/
typedef SWIFT_ENUM_NAMED(NSInteger, WMWhisperEntrustmentType, "WhisperEntrustmentType") {
/**
  Entrust the friend.
*/
  WMWhisperEntrustmentTypeEntrusted = 1,
/**
  No entrusted relationship with friend.
*/
  WMWhisperEntrustmentTypeNone = 0,
/**
  Entrusted by friend.
*/
  WMWhisperEntrustmentTypeEntrustedBy = -1,
};


/**
  A class representing the Whisper user information.
  In whisper managed SDK, self and all friends are Whisper user, and have
  same user attributes.
*/
SWIFT_CLASS_NAMED("WhisperUserInfo")
@interface WMWhisperUserInfo : NSObject
/**
  Whisper managed User ID max length.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_ID_LEN;)
+ (NSInteger)MAX_ID_LEN;
/**
  Whisper managed user name max length.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_USER_NAME_LEN;)
+ (NSInteger)MAX_USER_NAME_LEN;
/**
  Whisper managed user description max length.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_USER_DESCRIPTION_LEN;)
+ (NSInteger)MAX_USER_DESCRIPTION_LEN;
/**
  Whisper managed user gender max length.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_GENDER_LEN;)
+ (NSInteger)MAX_GENDER_LEN;
/**
  Whisper managed user phone number max length.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_PHONE_LEN;)
+ (NSInteger)MAX_PHONE_LEN;
/**
  Whisper managed user email address max length.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_EMAIL_LEN;)
+ (NSInteger)MAX_EMAIL_LEN;
/**
  Whisper managed user region max length.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_REGION_LEN;)
+ (NSInteger)MAX_REGION_LEN;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  User ID.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable userId;
/**
  Nickname, also as display name.
*/
@property (nonatomic, copy) NSString * _Nullable name;
/**
  User’s brief description, also as what’s up.
*/
@property (nonatomic, copy) NSString * _Nullable briefDescription;
/**
  If user has avatar.
*/
@property (nonatomic) BOOL hasAvatar;
/**
  User’s gender.
*/
@property (nonatomic, copy) NSString * _Nullable gender;
/**
  User’s phone number.
*/
@property (nonatomic, copy) NSString * _Nullable phone;
/**
  User’s email address.
*/
@property (nonatomic, copy) NSString * _Nullable email;
/**
  User’s region information.
*/
@property (nonatomic, copy) NSString * _Nullable region;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/**
  A class representing the Whisper friend information.
  Include the basic user information and the extra friend information.
*/
SWIFT_CLASS_NAMED("WhisperFriendInfo")
@interface WMWhisperFriendInfo : WMWhisperUserInfo
/**
  Whisper friend label max length.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_LABEL_LEN;)
+ (NSInteger)MAX_LABEL_LEN;
/**
  Whisper managed user presence max length.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_USER_PRESENCE_LEN;)
+ (NSInteger)MAX_USER_PRESENCE_LEN;
/**
  Friend’s entrustment type.
*/
@property (nonatomic) enum WMWhisperEntrustmentType entrusted;
/**
  Label name for the friend.
*/
@property (nonatomic, copy) NSString * _Nullable label;
/**
  Friend’s presence status.
*/
@property (nonatomic, copy) NSString * _Nullable presence;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

/**
  Whisper log level to control or filter log output
*/
typedef SWIFT_ENUM_NAMED(NSInteger, WMWhisperLogLevel, "WhisperLogLevel") {
/**
  Log level None
  Indicate disable log output.
*/
  WMWhisperLogLevelNone = 0,
/**
  Log level error.
  Indicate output log with level ‘Error’ only.
*/
  WMWhisperLogLevelError = 1,
/**
  Log level warning.
  Indicate output log with level ‘Error’ and ‘Warning’.
*/
  WMWhisperLogLevelWarning = 2,
/**
  Log level info.
  Indicate output log with level ‘Error’, ‘Warning’ and ‘Info’.
*/
  WMWhisperLogLevelInfo = 3,
/**
  Log level debug.
  Indicate output log with no filters.
*/
  WMWhisperLogLevelDebug = 4,
};


/**
  A class representing the Whisper user information.
  In whisper managed SDK, all node have same node attributes.
*/
SWIFT_CLASS_NAMED("WhisperNodeInfo")
@interface WMWhisperNodeInfo : NSObject
/**
  Whisper managed node ID max length.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_ID_LEN;)
+ (NSInteger)MAX_ID_LEN;
/**
  Whisper managed node ID max length.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_NODE_NAME_LEN;)
+ (NSInteger)MAX_NODE_NAME_LEN;
/**
  Whisper managed node description max length.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_NODE_DESCRIPTION_LEN;)
+ (NSInteger)MAX_NODE_DESCRIPTION_LEN;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  The node id.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable nodeId;
/**
  The node name.
*/
@property (nonatomic, copy) NSString * _Nullable name;
/**
  The node description.
*/
@property (nonatomic, copy) NSString * _Nullable briefDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/**
  WhisperOptions defines several settings that control the way the
  Whisper client connects to an Whisper managed server.
  Default values are not defined for server_uri of WhisperOptions,
  so application should be set server_url clearly.
*/
SWIFT_CLASS_NAMED("WhisperOptions")
@interface WMWhisperOptions : NSObject
/**
  Set the app and app key passed to the server when the client connects
  to it.
  \param appId New app id value

  \param appKey New app key value

*/
- (void)setAppId:(NSString * _Nonnull)appId andKey:(NSString * _Nonnull)appKey;
/**
  The app identifier passed to the server when the client connects to it.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable appId;
/**
  Set the login and password passed to the server when the client
  connects to it.
  The application should clear the password in memory ASAP for
  security issues.
  \param login login value

  \param password password to login

*/
- (void)setLogin:(NSString * _Nonnull)login andPassword:(NSString * _Nonnull)password;
/**
  The user login identifier passed to the server when the client
  connects to it.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable login;
/**
  The Web API server URL;
*/
@property (nonatomic, copy) NSString * _Nullable apiServerUrl;
/**
  A null - terminated string specifying the server to which the
  client will connect.
  It takes the form protocol://host:port. Currently, protocol must
  be tcp or ssl. For host, you can specify either an IP address or
  a host name.
*/
@property (nonatomic, copy) NSString * _Nullable mqttServerUri;
/**
  The file in PEM format containing the server public digital
  certificates trusted by the client.
*/
@property (nonatomic, copy) NSString * _Nullable trustStore;
/**
  The application defined persistent data location.
  The location must be set.
*/
@property (nonatomic, copy) NSString * _Nullable persistentLocation;
/**
  The virtual device ID specified by application.
  This attribute only for advanced user & test purpose
*/
@property (nonatomic, copy) NSString * _Nullable deviceId;
/**
  The “keep alive” interval, measured in seconds, defines the maximum
  time that should pass without communication between the client and
  the server The client will ensure that at least one message travels
  across the network within each keep alive period. In the absence of
  a data-related message during the time period, the client sends
  a very small “ping” message, which the server will acknowledge.
  The keep alive interval enables the client to detect when the server
  is no longer available without having to wait for the long TCP/IP
  timeout. The default value is zero, will use system default interval.
*/
@property (nonatomic) NSInteger keepAliveInterval;
/**
  The time interval in seconds to allow a connect to complete.
  The default value is zero, will use system default timeout.
*/
@property (nonatomic) NSInteger connectTimeout;
/**
  The max number of times to retry connect.
  The default value is zero, means no retry.
*/
@property (nonatomic) NSInteger retryTimes;
/**
  The time interval in seconds for retry connect.
  The default value is zero, means retry immediately.
*/
@property (nonatomic) NSInteger retryInterval;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNumber;

/**
  The class representing directed accessiable port forwarding manager.
*/
SWIFT_CLASS_NAMED("WhisperPortForwarding")
@interface WMWhisperPortForwarding : NSObject
/**
  Get port forwarding manager instance with client mode.
  This function should be used in the case that the server bearing port
  forwarding server is directly accessible for port forwarding client.
  \param whisper The whisper client instance


  throws:
  WhisperError

  returns:
  The client portforwarding manager
*/
+ (WMWhisperPortForwarding * _Nullable)getInstance:(WMWhisper * _Nonnull)whisper error:(NSError * _Nullable * _Nullable)error;
/**
  Get port forwarding manager instance with server mode.
  This function should be used in the case that the server bearing port
  forwarding server is directly accessible for port forwarding client.
  \param whisper The whisper client instance

  \param host The binding host

  \param port The binding port

  \param listeningHost The listening host

  \param listeningPort The listening port

  \param services The services to access viar port forwarding service


  throws:
  WhisperError

  returns:
  The server port forwarding manager
*/
+ (WMWhisperPortForwarding * _Nullable)getInstance:(WMWhisper * _Nonnull)whisper :(NSString * _Nonnull)host :(NSString * _Nonnull)port :(NSString * _Nullable)listeningHost :(NSString * _Nullable)listeningPort :(NSArray<WMRemoteService *> * _Nonnull)services error:(NSError * _Nullable * _Nullable)error;
/**
  Get current port forwarding manager or nil

  returns:
  The current port forwarding manager
*/
+ (WMWhisperPortForwarding * _Nullable)getInstance;
- (void)cleanup;
/**
  Open an port forwarding.
  \param friendId The friend to have port forwarding relation with

  \param service The service to port forwarding

  \param host The listening host of remote server

  \param port The listening port of remote server

  \param handler The handler to handle event when opening port
  forwarding completed

  \param context The application defined data


  throws:
  WhisperError

  returns:
  The port forwarding identifier
*/
- (NSNumber * _Nullable)open:(NSString * _Nonnull)friendId forService:(NSString * _Nonnull)service :(NSString * _Nonnull)host :(NSString * _Nonnull)port :(SWIFT_NOESCAPE void (^ _Nonnull)(NSInteger, NSInteger, NSString * _Nullable, id _Nullable))handler :(id _Nullable)context error:(NSError * _Nullable * _Nullable)error;
/**
  Close the specified port forwarding.
  \param portForwarding The port forwarding Id


  throws:
  WhisperError
*/
- (BOOL)close:(NSInteger)portForwarding :(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

enum WMWhisperStreamType : NSInteger;
@protocol WMWhisperStreamDelegate;
@class WMWhisperStream;

/**
  The class representing the whisper session conversation.
*/
SWIFT_CLASS_NAMED("WhisperSession")
@interface WMWhisperSession : NSObject
/**
  Close a session to friend. All resources include streams, channels,
  portforwardings associated with current session will be destroyed.
*/
- (void)close;
/**
  Send session request to the friend.
  \param handler A handler to receive the session response


  throws:
  WhisperError
*/
- (BOOL)sendInviteRequestWithResponseHandler:(void (^ _Nonnull)(WMWhisperSession * _Nonnull, NSInteger, NSString * _Nullable, NSString * _Nullable))handler error:(NSError * _Nullable * _Nullable)error;
/**
  Reply the session request from friend.
  This function will send a session response to friend.
  \param status The status code of the response. 0 is success,
  otherwise is error

  \param reason The error message if status is error, or nil if success


  throws:
  WhisperError
*/
- (BOOL)replyInviteRequestWithStatus:(NSInteger)status reason:(NSString * _Nullable)reason error:(NSError * _Nullable * _Nullable)error;
/**
  Begin to start a session.
  All streams in current session will try to connect with remote friend,
  The stream status will update to application by stream’s
  \code
  WhisperStreamDelegate
  \endcode.
  \param sdp The remote user’s SDP.
  Reference: https://tools.ietf.org/html/rfc4566


  throws:
  WhisperError
*/
- (BOOL)startWithRemoteSdp:(NSString * _Nonnull)sdp error:(NSError * _Nullable * _Nullable)error;
/**
  Add a new stream to session.
  Whisper stream supports several underlying transport mechanisms:
  <ul>
    <li>
      Plain/encrypted UDP data gram protocol
    </li>
    <li>
      Plain/encrypted TCP like reliable stream protocol
    </li>
    <li>
      Multiplexing over UDP
    </li>
    <li>
      Multiplexing over TCP like reliable protocol
    </li>
  </ul>
  Application can use options to specify the new stream mode.
  Multiplexing over UDP can not provide reliable transport.
  \param type The stream type defined in WhisperStreamType

  \param options The stream mode options

  \param components The component ID

  \param delegate The Application defined protocol defined in
  \code
  WhisperStreamDelegate
  \endcode


  throws:
  WhisperError

  returns:
  The new added Whisper stream
*/
- (WMWhisperStream * _Nullable)addStreamWithType:(enum WMWhisperStreamType)type options:(WhisperStreamOptions)options components:(NSInteger)components delegate:(id <WMWhisperStreamDelegate> _Nonnull)delegate error:(NSError * _Nullable * _Nullable)error;
/**
  Remove a stream from session
  \param stream The whisper stream to be removed


  throws:
  WhisperError
*/
- (BOOL)removeStream:(WMWhisperStream * _Nonnull)stream error:(NSError * _Nullable * _Nullable)error;
/**
  Add a new portforwarding service to session.
  The registered services can be used by remote peer in portforwarding
  request.
  \param serviceName The new service name, should be unique in session scope

  \param proto The protocol of the service

  \param host The host name or ip of the service

  \param port The port of the service


  throws:
  WhisperError
*/
- (BOOL)addServiceWithName:(NSString * _Nonnull)serviceName protocol:(enum WMPortForwardingProtocol)proto host:(NSString * _Nonnull)host port:(NSString * _Nonnull)port error:(NSError * _Nullable * _Nullable)error;
/**
  Remove a portforwarding server to session.
  This function has not effect on existing portforwarings.
  \param serviceName The service name

*/
- (void)removeServiceWithName:(NSString * _Nonnull)serviceName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class WMWhisperSessionManagerOptions;

/**
  The class representing Whisper session manager.
*/
SWIFT_CLASS_NAMED("WhisperSessionManager")
@interface WMWhisperSessionManager : NSObject
/**
  Get a whisper session manager instance.
  This function is convinience way to get instance without interest to
  session request from friends.
  \param whisper Whisper client instance

  \param options The options to set for whisper session manager


  throws:
  WhisperError

  returns:
  A whisper session manager
*/
+ (WMWhisperSessionManager * _Nullable)getInstance:(WMWhisper * _Nonnull)whisper withOptions:(WMWhisperSessionManagerOptions * _Nonnull)options error:(NSError * _Nullable * _Nullable)error;
/**
  Get a whisper session manager instance.
  \param whisper Whisper client instance

  \param options The options to set for whisper session manager.

  \param handler The handler for whisper session manager to process session
  request from friends.


  throws:
  WhisperError

  returns:
  A whisper session manager
*/
+ (WMWhisperSessionManager * _Nullable)getInstance:(WMWhisper * _Nonnull)whisper withOptions:(WMWhisperSessionManagerOptions * _Nonnull)options usingHandler:(BOOL (^ _Nonnull)(WMWhisper * _Nonnull, NSString * _Nonnull, NSString * _Nonnull))handler error:(NSError * _Nullable * _Nullable)error;
/**
  Get a whisper session manager instance.

  returns:
  The whisper session manager or nil
*/
+ (WMWhisperSessionManager * _Nullable)getInstance;
/**
  Clean up whisper session manager.
*/
- (void)cleanup;
/**
  Create a new session converstation to the specified friend.
  The session object represent a conversation handle to a friend.
  \param target The target id(userid or userid@nodeid).


  throws:
  WhisperError

  returns:
  The new WhisperSession
*/
- (WMWhisperSession * _Nullable)newSessionTo:(NSString * _Nonnull)target error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  The options to whisper session manager.
*/
SWIFT_CLASS_NAMED("WhisperSessionManagerOptions")
@interface WMWhisperSessionManagerOptions : NSObject
- (nonnull instancetype)initWithStunServer:(NSString * _Nonnull)stunServer turnServer:(NSString * _Nonnull)turnServer turnUsername:(NSString * _Nonnull)turnUsername turnPassword:(NSString * _Nonnull)turnPassword OBJC_DESIGNATED_INITIALIZER;
/**
  STUN server.
  Format is: server_name_or_ip[:port]
  The default port is 3478.
*/
@property (nonatomic, copy) NSString * _Nonnull stunServer;
/**
  TURN server.
  Format is: server_name_or_ip[:port]
  The default port is 3478.
*/
@property (nonatomic, copy) NSString * _Nonnull turnServer;
/**
  TURN server user name.
*/
@property (nonatomic, copy) NSString * _Nonnull turnUsername;
/**
  TRUN server password.
*/
@property (nonatomic, copy) NSString * _Nonnull turnPassword;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  The class representing Whisper stream.
*/
SWIFT_CLASS_NAMED("WhisperStream")
@interface WMWhisperStream : NSObject
/**
  Set the whisper stream type.
  This function has not effect on connected streams.
  Application can change the stream type before start session.
  \param newType New stream type defined in WhisperStreamType.


  throws:
  WhisperError
*/
- (BOOL)setType:(enum WMWhisperStreamType)newType error:(NSError * _Nullable * _Nullable)error;
/**
  Get the whisper stream type.

  returns:
  The stream type defined in WhisperStreamType
*/
- (enum WMWhisperStreamType)getType;
/**
  Send outgoing data to remote peer.
  If the stream is in multiplexing mode, application can not call this
  function to send data. If this function is called on multiplexing mode
  stream, it will throw Error.
  \param component The component ID

  \param data The ougoing data


  throws:
  WHisperError

  returns:
  Bytes of data sent on success
*/
- (NSNumber * _Nullable)writeDataToComponent:(NSInteger)component withData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error;
/**
  Open a new channel on multiplexing stream.
  If the stream is not multiplexing this function will throw Error.
  \param component The component ID

  \param cookie The application defined data passed to remote peer.


  throws:
  WhisperError

  returns:
  New channel ID
*/
- (NSNumber * _Nullable)openChannelWithinComponent:(NSInteger)component withCookie:(NSString * _Nonnull)cookie error:(NSError * _Nullable * _Nullable)error;
/**
  Close a new channel on multiplexing stream.
  If the stream is not multiplexing this function will throw Error.
  <ul>
    <li>
      Parameter:
      <ul>
        <li>
          component: The component ID
        </li>
        <li>
          channel: The channel ID to close
        </li>
      </ul>
    </li>
  </ul>

  throws:
  WhisperError
*/
- (BOOL)closeChannelWithinComponent:(NSInteger)component forChannel:(NSInteger)channel error:(NSError * _Nullable * _Nullable)error;
/**
  Send outgoing data to remote peer.
  If the stream is not multiplexing this function will throw Error.
  \param component The component ID

  \param channel The channel ID

  \param data The outgoing data


  throws:
  WhiserError

  returns:
  Bytes of data sent on sucess
*/
- (NSNumber * _Nullable)writeChannelDataWithinComponent:(NSInteger)component toChannel:(NSInteger)channel withData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error;
/**
  Request remote peer to pend channel data sending.
  If the stream is not multiplexing this function will throw Error.
  \param component The component ID

  \param channel The channel ID


  throws:
  WhisperError
*/
- (BOOL)pendChannelWithinComponent:(NSInteger)component forChannel:(NSInteger)channel error:(NSError * _Nullable * _Nullable)error;
/**
  Request remote peer to resume channel data sending.
  If the stream is not multiplexing this function will throw Error.
  \param component The component ID

  \param channel The channel ID


  throws:
  WhisperError
*/
- (BOOL)resumeChannelWithinComponent:(NSInteger)component forChannel:(NSInteger)channel error:(NSError * _Nullable * _Nullable)error;
/**
  Open a port forwarding to remote service over multiplexing.
  If the stream is not multiplexing this function will throw Error.
  \param component The component ID

  \param service The remote service name

  \param proto Port forwarding protocol

  \param host Local host or ip to bind. Defaultlly port forwarding
  will bind to localhost

  \param port Local port to bind


  throws:
  WhisperError

  returns:
  Port forwarding ID
*/
- (NSNumber * _Nullable)openPortForwardingWithinComponent:(NSInteger)component forService:(NSString * _Nonnull)service withProtocol:(enum WMPortForwardingProtocol)proto host:(NSString * _Nonnull)host port:(NSString * _Nonnull)port error:(NSError * _Nullable * _Nullable)error;
/**
  Close a port forwarding.
  If the stream is not multiplexing this function will throw Error.
  \param component The component ID

  \param portForwarding The port forwarding ID


  throws:
  WhisperError
*/
- (BOOL)closePortForwardingWithinComponent:(NSInteger)component forPortForwarding:(NSInteger)portForwarding error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

enum WMWhisperStreamState : NSInteger;

/**
  The protocol to whisper stream instance.
  Include stream status callback, stream data callback, and channel
  callbacks.
*/
SWIFT_PROTOCOL_NAMED("WhisperStreamDelegate")
@protocol WMWhisperStreamDelegate
@optional
/**
  Tell the delegate that the state of whisper stream has been changed.
  \param stream The whisper stream instance

  \param newState Stream state defined in \code
  WhisperStreamState
  \endcode

*/
- (void)streamStateDidChange:(WMWhisperStream * _Nonnull)stream newState:(enum WMWhisperStreamState)newState;
/**
  Tell the delegate that the current stream received an incomping
  packet.
  If the stream enabled multiplexing mode, application will not
  receive stream-layered data callback any more. All data will
  reported as multiplexing channel data.
  \param stream The whisper stream instance

  \param component The component ID

  \param data The received packet data

*/
- (void)didReceiveStreamData:(WMWhisperStream * _Nonnull)stream fromComponent:(NSInteger)component withData:(NSData * _Nonnull)data;
/**
  Tell the delegate that an new request within sesion to open multiplexing
  channel has been received.
  \param stream The whisper stream instance

  \param component The component ID

  \param wantChannel The channel ID

  \param cookie Application defined string data send from remote peer.


  returns:
  True on success, or false if an error occurred.
  The channel will continue to open only this callback return true,
  otherwise the channel will be closed.
*/
- (BOOL)shouldOpenNewChannel:(WMWhisperStream * _Nonnull)stream withinComponent:(NSInteger)component wantChannel:(NSInteger)wantChannel withCookie:(NSString * _Nonnull)cookie;
/**
  Tell the delegate that new multiplexing channel has been opened.
  \param stream The whisper stream instance

  \param component The component ID

  \param newChannel The channel ID

*/
- (void)didOpenNewChannel:(WMWhisperStream * _Nonnull)stream withinComponent:(NSInteger)component newChannel:(NSInteger)newChannel;
/**
  Tell the delegate that an multiplexing channel has been closed.
  \param stream The whisper stream instance

  \param component The component ID

  \param channel The channel ID

  \param reason Channel close reason code, defined in \code
  CloseReason
  \endcode.

*/
- (void)didCloseChannel:(WMWhisperStream * _Nonnull)stream withinComponent:(NSInteger)component forChannel:(NSInteger)channel withReason:(enum WMCloseReason)reason;
/**
  Tell the delegate that the channel received an incoming packet.
  \param stream The whisper stream instance

  \param component The component ID

  \param channel The channel ID

  \param data The received data


  returns:
  True on success, or false if an error occurred.
  If this callback return false, the channel will be closed
  with CloseReason_Error.
*/
- (BOOL)didReceiveChannelData:(WMWhisperStream * _Nonnull)stream withinComponent:(NSInteger)component fromChannel:(NSInteger)channel withData:(NSData * _Nonnull)data;
/**
  Tell the delegate that the channel should pend data sending to remote
  peer.
  \param stream The whisper stream instance

  \param component The component ID

  \param channel The channel ID

*/
- (void)channelPending:(WMWhisperStream * _Nonnull)stream withinComponent:(NSInteger)component forChannel:(NSInteger)channel;
/**
  Tell the delegate that the channel should resume data pending to remote
  peer.
  \param stream The whisper stream instance

  \param component The component ID

  \param channel The channel ID

*/
- (void)channelResumed:(WMWhisperStream * _Nonnull)stream withinComponent:(NSInteger)component forChannel:(NSInteger)channel;
@end

/**
  Whisper stream state.
  The stream state will be changed according to the phase of the stream.
*/
typedef SWIFT_ENUM_NAMED(NSInteger, WMWhisperStreamState, "WhisperStreamState") {
/**
  New stream.
*/
  WMWhisperStreamStateInitialized = 0,
/**
  The stream gathered all available candidates.
*/
  WMWhisperStreamStateCandidateGathered = 1,
/**
  The ICE context is ready for the stream to start.
*/
  WMWhisperStreamStateIceReady = 2,
/**
  The stream is trying to connect the remote.
*/
  WMWhisperStreamStateNegotiating = 3,
/**
  The stream connected with remove peer.
*/
  WMWhisperStreamStateConnected = 4,
/**
  The stream is on error, cannot to continue.
*/
  WMWhisperStreamStateError = 5,
};

/**
  Whisper stream type.
  Reference:
  https://tools.ietf.org/html/rfc4566#section-5.14
  https://tools.ietf.org/html/rfc4566#section-8
*/
typedef SWIFT_ENUM_NAMED(NSInteger, WMWhisperStreamType, "WhisperStreamType") {
/**
  Audio stream
*/
  WMWhisperStreamTypeAudio = 0,
/**
  Video stream
*/
  WMWhisperStreamTypeVideo = 1,
/**
  Text stream
*/
  WMWhisperStreamTypeText = 2,
/**
  Application stream
*/
  WMWhisperStreamTypeApplication = 3,
/**
  Message stream
*/
  WMWhisperStreamTypeMessage = 4,
};


#pragma clang diagnostic pop
