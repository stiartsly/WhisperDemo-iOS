// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class WMWhisperOptions;
@protocol WhisperHandler;
@class WMWhisperUserInfo;
@class WMWhisperNodeInfo;
@class WMWhisperFriendInfo;

SWIFT_CLASS_NAMED("Whisper")
@interface WMWhisper : NSObject
+ (BOOL)checkIdValid:(NSString * _Nonnull)id;
+ (WMWhisper * _Nullable)getInstanceWithOptions:(WMWhisperOptions * _Nonnull)options handler:(id <WhisperHandler> _Nonnull)handler object:(id _Nullable)context error:(NSError * _Nullable * _Nullable)error;
+ (WMWhisper * _Nullable)getInstance;
- (BOOL)startWithIterateInterval:(NSInteger)iterateInterval error:(NSError * _Nullable * _Nullable)error;
- (void)kill;
- (NSString * _Nonnull)getAppId;
- (NSString * _Nonnull)getNodeId;
- (NSString * _Nonnull)getUserId;
- (NSString * _Nonnull)getLogin;
- (BOOL)setSelfInfoWith:(WMWhisperUserInfo * _Nonnull)info error:(NSError * _Nullable * _Nullable)error;
- (WMWhisperUserInfo * _Nullable)getSelfInfoAndReturnError:(NSError * _Nullable * _Nullable)error;
- (BOOL)setNodeInfoWith:(WMWhisperNodeInfo * _Nonnull)info error:(NSError * _Nullable * _Nullable)error;
- (WMWhisperNodeInfo * _Nullable)getNodeInfoAndReturnError:(NSError * _Nullable * _Nullable)error;
- (NSArray<WMWhisperFriendInfo *> * _Nullable)getFriendsAndReturnError:(NSError * _Nullable * _Nullable)error;
- (WMWhisperFriendInfo * _Nullable)getFriendInfoWith:(NSString * _Nonnull)friendId error:(NSError * _Nullable * _Nullable)error;
- (BOOL)setFriendLabelAt:(NSString * _Nonnull)friendId with:(NSString * _Nonnull)label error:(NSError * _Nullable * _Nullable)error;
- (BOOL)isFriendWith:(NSString * _Nonnull)friendId;
- (BOOL)friendRequestTo:(NSString * _Nonnull)userId with:(NSString * _Nonnull)hello error:(NSError * _Nullable * _Nullable)error;
- (BOOL)replyFriendRequestFrom:(NSString * _Nonnull)userId on:(NSInteger)status with:(NSString * _Nullable)reason entrusted:(NSInteger)entrusted expire:(NSString * _Nullable)expire error:(NSError * _Nullable * _Nullable)error;
- (BOOL)friendRemoveWith:(NSString * _Nonnull)friendId error:(NSError * _Nullable * _Nullable)error;
- (BOOL)sendFriendMessageTo:(NSString * _Nonnull)to with:(NSString * _Nonnull)message error:(NSError * _Nullable * _Nullable)error;
- (BOOL)inviteFriendTo:(NSString * _Nonnull)friendId with:(NSString * _Nonnull)data callback:(SWIFT_NOESCAPE void (^ _Nonnull)(WMWhisper * _Nonnull, NSString * _Nonnull, NSInteger, NSString * _Nullable, NSString * _Nullable, id _Nullable))callback :(id _Nullable)context error:(NSError * _Nullable * _Nullable)error;
- (BOOL)replyFriendInviteFrom:(NSString * _Nonnull)friendId on:(NSInteger)status with:(NSString * _Nullable)reason data:(NSString * _Nonnull)data error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface WMWhisper (SWIFT_EXTENSION(ManagedWhisper))
@end

typedef SWIFT_ENUM(NSInteger, WhisperConnectionStatus) {
  WhisperConnectionStatusConnecting = 0,
  WhisperConnectionStatusConnected = 1,
  WhisperConnectionStatusDisconnected = 2,
};


SWIFT_CLASS_NAMED("WhisperFriendInfo")
@interface WMWhisperFriendInfo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WHISPER_MAX_USER_NAME_LEN;)
+ (NSInteger)WHISPER_MAX_USER_NAME_LEN;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WHISPER_MAX_USER_PRESENCE_LEN;)
+ (NSInteger)WHISPER_MAX_USER_PRESENCE_LEN;
@property (nonatomic, strong) WMWhisperUserInfo * _Nullable userInfo;
@property (nonatomic) BOOL entrusted;
@property (nonatomic, copy) NSString * _Nullable label;
@property (nonatomic, copy) NSString * _Nullable presence;
+ (NSString * _Nonnull)formatWithInfo:(WMWhisperFriendInfo * _Nonnull)info;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface WMWhisperFriendInfo (SWIFT_EXTENSION(ManagedWhisper))
@end


SWIFT_PROTOCOL("_TtP14ManagedWhisper14WhisperHandler_")
@protocol WhisperHandler
@optional
- (void)onIdleWithW:(WMWhisper * _Nonnull)whisper :(id _Nullable)context;
- (void)onConnectionWithW:(WMWhisper * _Nonnull)whisper with:(enum WhisperConnectionStatus)status :(id _Nullable)context;
- (void)onReadyWithW:(WMWhisper * _Nonnull)whisper :(id _Nullable)context;
- (void)onSelfInfoChangedWithW:(WMWhisper * _Nonnull)whisper with:(WMWhisperUserInfo * _Nonnull)info :(id _Nullable)context;
- (BOOL)onFriendIteratedWithW:(WMWhisper * _Nonnull)whisper with:(WMWhisperFriendInfo * _Nullable)info :(id _Nullable)context;
- (void)onFriendInfoChangedWithW:(WMWhisper * _Nonnull)whisper at:(NSString * _Nonnull)friendId with:(WMWhisperFriendInfo * _Nonnull)info :(id _Nullable)context;
- (void)onFriendPresenceWithW:(WMWhisper * _Nonnull)whisper at:(NSString * _Nonnull)friendId with:(NSString * _Nonnull)presence :(id _Nullable)context;
- (BOOL)onFriendRequestWithW:(WMWhisper * _Nonnull)whisper from:(NSString * _Nonnull)userId with:(WMWhisperUserInfo * _Nonnull)info hello:(NSString * _Nonnull)hello :(id _Nullable)context;
- (BOOL)onFriendResponseWithW:(WMWhisper * _Nonnull)whisper from:(NSString * _Nonnull)userId on:(NSInteger)status with:(NSString * _Nullable)reason entrusted:(NSInteger)entrusted expire:(NSString * _Nullable)expire :(id _Nullable)context;
- (void)onFriendAddedWithW:(WMWhisper * _Nonnull)whisper with:(WMWhisperFriendInfo * _Nonnull)info :(id _Nullable)context;
- (void)onFriendRemovedWithW:(WMWhisper * _Nonnull)whisper at:(NSString * _Nonnull)friendId :(id _Nullable)context;
- (BOOL)onFriendMessageWithW:(WMWhisper * _Nonnull)whisper from:(NSString * _Nonnull)from with:(NSString * _Nonnull)message :(id _Nullable)context;
- (BOOL)onFriendInviteWithW:(WMWhisper * _Nonnull)whisper from:(NSString * _Nonnull)from with:(NSString * _Nonnull)data :(id _Nullable)context;
@end


SWIFT_CLASS_NAMED("WhisperNodeInfo")
@interface WMWhisperNodeInfo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WHISPER_MAX_ID_LEN;)
+ (NSInteger)WHISPER_MAX_ID_LEN;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WHISPER_MAX_NODE_NAME_LEN;)
+ (NSInteger)WHISPER_MAX_NODE_NAME_LEN;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger WHISPER_MAX_NODE_DESCRIPTION_LEN;)
+ (NSInteger)WHISPER_MAX_NODE_DESCRIPTION_LEN;
@property (nonatomic, copy) NSString * _Nullable nodeId;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable briefDescription;
+ (NSString * _Nonnull)formatWithInfo:(WMWhisperNodeInfo * _Nonnull)info;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface WMWhisperNodeInfo (SWIFT_EXTENSION(ManagedWhisper))
@end


SWIFT_CLASS_NAMED("WhisperOptions")
@interface WMWhisperOptions : NSObject
@property (nonatomic, copy) NSString * _Nullable appId;
@property (nonatomic, copy) NSString * _Nullable appKey;
@property (nonatomic, copy) NSString * _Nullable login;
@property (nonatomic, copy) NSString * _Nullable password;
@property (nonatomic, copy) NSString * _Nullable apiServerUrl;
@property (nonatomic, copy) NSString * _Nullable mqttServerUri;
@property (nonatomic, copy) NSString * _Nullable trustStore;
@property (nonatomic, copy) NSString * _Nullable persistentLocation;
@property (nonatomic, copy) NSString * _Nullable deviceId;
@property (nonatomic) NSInteger keepAliveInterval;
@property (nonatomic) NSInteger connectTimeout;
@property (nonatomic) NSInteger retryTimes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface WMWhisperOptions (SWIFT_EXTENSION(ManagedWhisper))
@end

@class WhisperProxyService;

SWIFT_CLASS("_TtC14ManagedWhisper21WhisperPortForwarding")
@interface WhisperPortForwarding : NSObject
+ (WhisperPortForwarding * _Nullable)getInstanceWithW:(WMWhisper * _Nonnull)whisper error:(NSError * _Nullable * _Nullable)error;
+ (WhisperPortForwarding * _Nullable)getInstanceWithW:(WMWhisper * _Nonnull)whisper :(NSString * _Nonnull)host :(NSString * _Nonnull)port :(NSString * _Nullable)listeningHost :(NSString * _Nullable)listeningPort :(NSArray<WhisperProxyService *> * _Nonnull)services error:(NSError * _Nullable * _Nullable)error;
+ (WhisperPortForwarding * _Nullable)getInstance;
- (void)cleanup;
- (BOOL)closeWithPortForwardingId:(NSInteger)portForwardingId error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, WhisperPortForwardingMode) {
  WhisperPortForwardingModeClient = 0,
  WhisperPortForwardingModeServer = 1,
};


SWIFT_CLASS("_TtC14ManagedWhisper19WhisperProxyService")
@interface WhisperProxyService : NSObject
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable host;
@property (nonatomic, copy) NSString * _Nullable port;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("WhisperUserInfo")
@interface WMWhisperUserInfo : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_ID_LEN;)
+ (NSInteger)MAX_ID_LEN;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_USER_NAME_LEN;)
+ (NSInteger)MAX_USER_NAME_LEN;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_USER_DESCRIPTION_LEN;)
+ (NSInteger)MAX_USER_DESCRIPTION_LEN;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_GENDER_LEN;)
+ (NSInteger)MAX_GENDER_LEN;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_PHONE_LEN;)
+ (NSInteger)MAX_PHONE_LEN;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_EMAIL_LEN;)
+ (NSInteger)MAX_EMAIL_LEN;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MAX_REGION_LEN;)
+ (NSInteger)MAX_REGION_LEN;
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable briefDescription;
@property (nonatomic) BOOL hasAvatar;
@property (nonatomic, copy) NSString * _Nullable gender;
@property (nonatomic, copy) NSString * _Nullable phone;
@property (nonatomic, copy) NSString * _Nullable email;
@property (nonatomic, copy) NSString * _Nullable region;
+ (NSString * _Nonnull)formatWithInfo:(WMWhisperUserInfo * _Nonnull)info;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface WMWhisperUserInfo (SWIFT_EXTENSION(ManagedWhisper))
@end

#pragma clang diagnostic pop
